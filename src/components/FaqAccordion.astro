---
export interface Props {
  faqs: Array<{
    q: string;
    a: string;
  }>;
  title?: string;
}

const { faqs, title = "Frequently Asked Questions" } = Astro.props;
---

<div class="space-y-4">
  {title && <h3 class="text-2xl font-display font-semibold text-primary mb-6">{title}</h3>}
  
  <div class="space-y-2">
    {faqs.map((faq, index) => (
      <div class="border border-gray-200 rounded-lg">
        <button
          class="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-surface transition-colors focus:outline-none focus:ring-2 focus:ring-accent focus:ring-inset"
          aria-expanded="false"
          aria-controls={`faq-${index}`}
          data-faq-toggle
          data-faq-target={`faq-${index}`}
        >
          <span class="font-medium text-primary">{faq.q}</span>
          <svg 
            class="w-5 h-5 text-gray-500 transform transition-transform duration-200" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        <div 
          id={`faq-${index}`}
          class="hidden px-6 pb-4"
          role="region"
          aria-labelledby={`faq-button-${index}`}
        >
          <p class="text-gray-700 leading-relaxed">{faq.a}</p>
        </div>
      </div>
    ))}
  </div>
</div>

<script>
  // FAQ Accordion functionality
  document.addEventListener('DOMContentLoaded', () => {
    const faqToggles = document.querySelectorAll('[data-faq-toggle]');
    
    faqToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const targetId = toggle.getAttribute('data-faq-target');
        const target = document.getElementById(targetId);
        const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
        const icon = toggle.querySelector('svg');
        
        // Toggle aria-expanded
        toggle.setAttribute('aria-expanded', (!isExpanded).toString());
        
        // Toggle content visibility
        if (target) {
          target.classList.toggle('hidden');
        }
        
        // Rotate icon
        if (icon) {
          icon.classList.toggle('rotate-180');
        }
      });
      
      // Keyboard support
      toggle.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          toggle.click();
        }
      });
    });
  });
</script>

<!-- FAQ Schema -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": faqs.map(faq => ({
    "@type": "Question",
    "name": faq.q,
    "acceptedAnswer": {
      "@type": "Answer",
      "text": faq.a
    }
  }))
})} /> 